#!/usr/bin/env bash
# Script to sample from events and generate results from Timelens

root_path=$POLED_PATH

# Parse YAML function
source "$root_path"/scripts/parse_yaml.sh

# Parse the master YAML file
eval $(parse_yaml "$root_path"/config/master.yaml)
# Parse datasets paths YAML file (datasets)
datasets_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_datasets"/"$datasets_cfg_file"
eval $(parse_yaml "$datasets_yaml")
# Parse the POLED YAML file
poled_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_sampling"/"$poled_cfg_file"
eval $(parse_yaml "$poled_yaml")

# If it's on training mode, assume train and val cfgs
# E.g.:
# From: poled_exp_cfgs = ("iccv25.yaml" "cvpr.yaml")
# to:   poled_exp_cfgs = ("iccv25.yaml" "iccv25-train.yaml" "iccv25-val.yaml" "cvpr.yaml" "cvpr-train.yaml" "cvpr-val.yaml")
poled_exp_cfgs_tmp=()                     # Temporary array

if [[ "$poled_flag_train" == "true" ]]; then
  for exp_cfg in "${poled_exp_cfgs[@]}"; do
    poled_exp_cfgs_tmp+=("$exp_cfg")          # Add the original element
    poled_exp_cfgs_tmp+=("${exp_cfg%.yaml}-train.yaml") # Add "-train.yaml"
    poled_exp_cfgs_tmp+=("${exp_cfg%.yaml}-val.yaml")   # Add "-val.yaml"
  done
  poled_exp_cfgs=("${poled_exp_cfgs_tmp[@]}") # Assign back to original array if needed
fi

# Run everything, one at a time
# FROM POLED
for exp_cfg in "${poled_exp_cfgs[@]}"; do
  # Get experiment ID from the config file
  exp_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_sampling"/"$exp_cfg"
  eval $(parse_yaml "$exp_yaml")
  exp_name="$sampler_params_exp_name"
  exp_cfg_path="$poled_docker_app"/"$common_cfg_root"/"$common_cfg_sampling"/"$exp_cfg"
  # Get split based on the exp_cfg name (train, val, test)
  if [[ "$exp_cfg" == *"-train.yaml" ]]; then
    split="train"
  elif [[ "$exp_cfg" == *"-val.yaml" ]]; then
    split="val"
  else
    split="test"
  fi
  # FROM POLED
  for dataset_name in "${poled_datasets_name[@]}"; do
    var_dataset_root="$dataset_name"_root  # Get the variable Name (e.g. N-Caltech101_root, hsergb_root, ...)
    dataset_root="${!var_dataset_root}"  # Get the value of the variable generated by datasets_paths.yaml
    var_dataset_split="$dataset_name"_split_"$split"  # Get the variable name of the split
    dataset_split="${!var_dataset_split}"  # Get the value of the split
    echo dataset_split: "$dataset_split"

    # Dataset paths directories (to be writable from docker)
    dataset_sys_path="$datasets_common_root"/"$dataset_root"/sampling/"$exp_name"
    mkdir -p "$dataset_sys_path"
    chmod 777 "$dataset_sys_path"

    # FROM POLED
    for sampler in "${poled_samplers[@]}"; do
      # FROM POLED
      for run in "${poled_runs[@]}"; do
        # FROM POLED
        for prob_init in "${poled_prob_inits[@]}"; do
          # Randomly sample events
          if [[ "$prob_init" == "10" ]]; then
            prob_init_dec=1
          else
            prob_init_dec="0."$prob_init
          fi
          run_descriptor="$sampler"_"$prob_init_dec"-"$run"
         
          # LOGS
          logs_sys_path="$common_root"/"$common_logs_path"/"$dataset_name"/poled/"$exp_name"/"$run_descriptor"
          logs_sampling_time="$logs_sys_path"/"$common_logs_sampling_time_file"
          mkdir -p "$logs_sys_path"
          chmod 777 "$logs_sys_path"
          # Copy the config file to the logs folder
          docker cp ${poled_docker_id}:${exp_cfg_path} ${logs_sys_path}

          # Sampling
          echo "Running experiments for" "$run_descriptor", "with the config file:" "$exp_cfg"
          echo "Sampling events..."
          start_time=$(date +%s)
          docker exec -it "$poled_docker_id" python "$poled_docker_app"/src/event_sampling.py --cfg "$exp_cfg_path" --dataset_name "$dataset_name" --sampler "$sampler" --split "$dataset_split" --num_exp "$run" --prob_init "$prob_init"
          end_time=$(date +%s)
          echo "...done!"
          echo time: "$((end_time-start_time))" > "$logs_sampling_time"
        done
      done
    done
  done
done
