#!/usr/bin/env bash
# Script to do inference and evaluation of rpg_event_representation_learning

root_path=$POLED_PATH

# Parse YAML function
source "$root_path"/scripts/parse_yaml.sh

# Parse the master YAML file
eval $(parse_yaml "$root_path"/config/master.yaml)
# Parse datasets paths YAML file (datasets)
datasets_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_datasets"/"$datasets_cfg_file"
eval $(parse_yaml "$datasets_yaml")
# Parse the OLED YAML file (oled)
oled_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_sampling"/"$oled_cfg_file"
eval $(parse_yaml "$oled_yaml")
# Parse rpg_replearning YAML file (method)
method_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_methods"/"$rpg_replearning_cfg_file"
eval $(parse_yaml "$method_yaml")

# From OLED
for exp_cfg in "${oled_exp_cfgs[@]}"; do
  # Get experiment ID from the config file
  exp_yaml="$common_root"/"$common_cfg_root"/"$common_cfg_sampling"/"$exp_cfg"
  eval $(parse_yaml "$exp_yaml")
  exp_name="$sampler_params_exp_name"
  # From METHOD
  for dataset_name in "${method_datasets_name[@]}"; do
    var_dataset_root="$dataset_name"_root  # Get the variable Name (e.g. N-Caltech101_root, hsergb_root, ...)
    dataset_root="${!var_dataset_root}"  # Get the value of the variable generated by datasets_paths.yaml
    # TODO: Specifiy split (testing...)
    dataset_sys_path="$datasets_common_root"/"$dataset_root"  # Path to the dataset in the system
    dataset_docker_path="$method_docker_datasets"/"$dataset_root"  # Path to the dataset within the docker container
    # From OLED
    for sampler in "${oled_samplers[@]}"; do
      # From OLED
      for run in "${oled_runs[@]}"; do
        # From OLED
        for prob_init in "${oled_prob_inits[@]}"; do
          # Evaluate the downsampled events per method
          if [[ "$prob_init" == "10" ]]; then
            prob_init_dec=1
          else
            prob_init_dec="0."$prob_init
          fi
          run_descriptor="$sampler"_"$prob_init_dec"-"$run"
          
          echo "Running experiments for" "$run_descriptor", "experiment:" "$exp_name"

          # LOGS
          logs_path="$common_root"/"$common_logs_path"/"$dataset_name"/"$method_name"/"$exp_name"/"$run_descriptor"
          mkdir -p "$logs_path"
          chmod 777 -R "$logs_path"
          logs_res="$logs_path"/"$common_logs_res_file"
          logs_size="$logs_path"/"$common_logs_size_file"
          logs_time="$logs_path"/"$common_logs_time_file"          

          # EVALUATE
          echo "Running Representation Learning classifier, Saving logs to: $logs_res..."
          # TODO: Specify this "sampling" or "original" in YAML files
          data_eval_sys_path="$dataset_sys_path"/sampling/"$exp_name"/events_"$run_descriptor"/testing
          data_eval_docker_path="$dataset_docker_path"/sampling/"$exp_name"/events_"$run_descriptor"/testing

          start_time=$(date +%s)
          docker exec -it "$method_docker_id" python "$method_docker_app"/"$method_run" --test_dataset "$data_eval_docker_path" --checkpoint "$method_docker_app"/"$method_model_path"/"$method_checkpoint" --batch_size $method_batch_size --num_workers $method_num_workers --device "$method_device" > "$logs_res"
          end_time=$(date +%s)
          echo time: "$((end_time-start_time))" > "$logs_time"            
          echo "$data_eval_sys_path"
          echo size: "$(du -sh "$data_eval_sys_path")" > "$logs_size"
        done
      done
    done
  done
done
